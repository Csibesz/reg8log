################ High security register and login system ###################

This is register and login system designed with high security in mind.
it is intended for small web sites but that doesn't necessary mean that it cannot be used on larger scales (just no guaranty).
also that doesn't mean that it can be properly run on a weak/small hosting plan.

=================================

installation:

- first create a MySQL database named 'reg8log' manually.
database name can be changed in the include/info/info_dbms.php file.
- set the MySQL username and password in the include/info/info_dbms.php file.
- then open the project in your web browser. it detects automatically that database tables and initial variables are not setup and guides u to the installation page.
- in installation page, u should copy and paste and save a random string shown there into the setup/setup.txt file. this is to verify that u r the real owner of the site.
- then click on the continue button.
- then fill in the Admin account info (his password and email).
the admin account is used for operations like banning/unbanning users, approving pending registrations, etc.
- submit admin info form.
- tables, site special variables, and the admin account will be created automatically.

=================================

self critisism:

- using tables for HTML layout.
- not using standard software engineering methods like MVC.

=================================

important notes about users accounts backup and restore:

note that users passwords hashes are dependent on site variables stored in site_vars table and also on the pepper variable stored in the include/info/info_crypto.php file. so u must restore site_vars table data and the $pepper value if u want your users be able to login into their accounts again.

=================================

developing and testing environment of this program:

OS: MS Windows XP SP3
Browser: FF 10 and IE 7
EasyPHP 5.3.1.0 (MySQL 5.1.43, PHP 5.3.2, Apache 2.2.14)

=================================

configuration variables (all reside in include/info/info_?...?.php files)

------------------------------------------------
config vars in info_register.php:
------------------------------------------------

ajax_check_username:

enable/disable ajax check username availability in the register form.
maybe someone wants to disable it in high security scenarios.
note: when this var is set to false or registration in disabled, the system tries to pretend non-existent usernames entered in the login form and other subsystems to be existent (for example they can be blocked like existent accounts).

registeration_enabled:

u can disable public registeration by setting this variable to false.

password_refill:

whether to refill password field values in places like register form when the form data r not accepted and the form is returned to the user again. passwords received by the server are first encrypted (AES128+HMAC) with a private key automatically generated at the database setup step and only this encrypted password is resent to the user and filled in the password fields.

note that also the first time forms containing passwords are submitted, passwords are first hashed with SHA256 + a salt automatically generated at database setup step, and only these hashes are communicated over the unsecure HTTP.

email_verification_needed:

whether email verification by opening a special link sent to the email of users is necessary to complete their registrations.
temprary account info are stored in the pending_accounts table until their email is verified in the specified time, otherwise they expire and deleted by the cleanup code sooner or later.

email_verification_time:

the time period in which users must verify their emails to complete their registrations.
note that all time values in this program are specified in seconds.

admin_confirmation_needed:

whether admin approval is needed for every new registration. if set to true, the admin must see and confirm all registrations manually. of course he can also delete any of such pending accounts.

admin_confirmation_time:

the time period after which a pending account needing admin approval is considered expired.
if an account is expired it is not even shown to the admin for decision about it.

login_upon_register:

whether to login users automatically upon completing their registrations.
this login will last only until the user's browser is closed.

max_activation_emails:

maximum number of email verification emails that can be sent to the registrant's email.

can_notify_user_about_admin_action:

specifies whether the user can request be notified (via email) when admin approves or rejects/deletes his pending account.

------------------------------------------------
config vars in info_brute_force_protection.php:
------------------------------------------------

block_period:

the time period in which a defined maximum number of incorrect login attempts can occur.

block_threshold:

maximum number of incorrect login tries in each block_period period.
after that the account is locked until getting out of block_threshold in block_period.

captcha_threshold:

after this number of incorrect login tries in the block_period, passing a captcha test is needed for each subsequent try.
this can be very benefical as it can prevent many brute-force bots or guys from causing accounts be locked down (got this idea by testing on the yahoo mail login).

block_bypass_system_enabled:

if set to true, the owner of a locked down account can request a special link be sent to his email via which he can try to login to his account immediately and unrestricted.
this can be benefical if an attacker tries to block accounts to cause DOS or for any other malevolent purposes.

max_block_bypass_emails:

maximum number of block-bypass emails that can be sent to the email of the owner of a locked down account.
this is to prevent using this system to email bomb users or to cause the site domain be black listed by email servers, etc.

ip_captcha_threshold:

after this number of incorrect login tries from a certain ip, for subsequent login tries via that ip, passing a captcha test is required.

ip_block_threshold:

an ip will be prevented from login tries after this number of incorrect login tries in each ip_block_period period.

ip_block_proportional:

as an ip may be shared among possibly many users at the same time (or short times), this variable is set to true by default that causes that the proportion of incorrect logins to the correct logins be the criteria for ip block.
note: correct login tries to any specific account are counted only once in each ip_block_period period, but every incorrect login try is counted. this is because if we count every correct login try, an attacker can easily create an account in our system and after each certain number of incorrect login tries, login into his account to keep the proportion of incorrect and correct login tries under the block threshoulds.

ch_pswd_captcha_threshold:

in the change email or change password subsystems, if this number of incorrect current passwords are entered, for subsequent tries passing a captcha is needed. this is to prevent attackers from using change email and change password forms to brute-force users passwords in case a machine on which the user is logged in comes in their hands or when they succeeded in stealing user's autologin key/cookie.

ch_pswd_max_threshold:

after this number of wrong current passwords entered in the change email or change password forms, the autologin key of an account will be changed and thus the possible attacker will be forced to log out.

ch_pswd_period:

number of wrong current passwords entered in the change email/password forms are counted in this time period.

------------------------------------------------
config vars in info_register_fields.php:
------------------------------------------------

registeration fields values' limits/formats/regular expressions are stored in this file.
see it.
it configs mainly affect the register system but not only that. for example, email format or password format are enforced in the change email/password subsystems too.

------------------------------------------------
config vars in info_password_change_or_reset.php:
------------------------------------------------

max_password_reset_emails:

maximum number of password reset emails that can be sent in the password_reset_period period.

password_reset_period:

the time period in which special password reset link sent to the email of account owner is valid.

change_autologin_key_upon_new_password:

whether to change the account autologin key upon password change (via password reset or password change forms).
highly recommended to be on, because it is very probable that a password change/reset is related to the compromise of a previous password, so an attacker can be logged in currently, and merely changing the password is not enough for ensuring immediately ending his access to the user account.

------------------------------------------------
config vars in info_dbms.php:
------------------------------------------------

you easily see in this file, the information for connecting to MySQL.

------------------------------------------------
config vars in info_identify.php:
------------------------------------------------

this file contains some program internal config vars (related to identification/authentication of users)
but there exists some config vars in it interesting for other guys too:

long_age:

specifies, in seconds, how long users can be autologined when they login with 'remember me' option checked. the default value is 1 year.

change_autologin_key_upon_login:

whether to change user's autologin key upon each manual login.
this causes other machines that the user is currently logged in on them to logout.
recommended to enable this option for higher security.
also see the comments of the other mode in which the login key is changed even on every page view too.

------------------------------------------------
config vars in info_crypto.php:
------------------------------------------------

secure_hash_rounds:

number of hash rounds used for key stretching when converting a registring user's password to a hash to be stored in the database.
note that the actual number of rounds is 2^secure_hash_rounds.

pepper:

this is a random string composed of upper and lowercase letters + digits with length 22 that should be set by hand before installing the tables and variables of the program. changing it is recommended for maximum security, but the program doesn't rely vitally on it being changed for its security.
this random string is used in several subsystems: password hashing, (secure) random number generation, and encryption.
highly recommended to change it when more than ordinary security is needed.

encrypt_session_files_contents:

whether to encrypt session files contents on the server.
this causes complete confidentiality and authenticity.
the encryption is done with a key created from program's private encryption key + a temporary key for each client's session stored on the client browser, so even if an attacker steals the session id via the server side, he can not impersonate himself as other users. (note: pepper is used as another part of the encryption key too)
anyway this program doesn't use session storage for authentication purposes and so there is no important danger regarding session storage security.
note: session contents are not encrypted at the automatic database installation step, because the program vars (including encryption key) are not created yet. (maybe i should fix this in the future somehow).

store_request_entropy_probability:

the propability with which each request parameters entropy is added to the entropy var (stored in database).
this entropy is used in random number generation in addition to other entropy sources.

------------------------------------------------
config vars in info_cleanup.php:
------------------------------------------------

cleanup_probability:

probability with which cleanup codes are run in each part of the program and operation that stores records in the tables that may need cleanup to get rid of expired or more than maximum records.

max_nonexistent_users_records:

when public registration is disabled or ajax check username facility in the register form is disabled, the system tries to pretend non-existent usernames to be existent in different parts like the login form. for this, the system needs to store some records (for example the number of incorrect login attempts in a specified time period) for non-existent usernames in the project tables too (of course temporarily). but we can limit the maximum number of such records after which some of the oldest of such records will be deleted when the cleanup codes are run, so this feature (pretend) cannot probably be misused by attackers to consume all of our available disk space.

max_login_attempt_records:

the maximum number of login tries recorded with their ip for limiting attacks according to IPs.
we limit this to prevent consuming all available disk space or related tables getting too big under heavy attacks (botnet attacks).
some of the oldest records will be deleted if this maximum is reached when cleanup codes are run.
u can set this to a bigger number if u have plenty of disk space and want to be able to counter bigger attacks.

------------------------------------------------
config vars in common.php:
------------------------------------------------

this file is not just a config file. it contains important instructions too and is included at the begining of every page of the project.

debug_mode:

when debug mode is on all errors and warnings are displayed and technical db error messages are printed and special links that are sent in security emails like password reset or email verification email are echo'ed to the browser too so u can easily and quickly test and debug the program. it is on by default!

db_installed:

when the tables and variables (and also the Admin account) of the program are installed successfully, u can set this var to true to increase the overal performance of the system if needed.
i don't know if this can have a significant effect, but it is there in case it can.
when this var is set to false (default), the program itself decides if database is setup fully/successfully by executing a probing query on a dummy table; anyway this should be very fast and have little overhead.
